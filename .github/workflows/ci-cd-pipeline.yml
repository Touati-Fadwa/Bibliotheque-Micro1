name: CI/CD Pipeline

# Déclencheurs pour le pipeline : à chaque push ou pull request sur la branche main
on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

# Définition des jobs du pipeline
jobs:
  build:
    runs-on: ubuntu-latest

    services:
      postgres:
        image: postgres:16  # Version de PostgreSQL
        env:
          POSTGRES_USER: postgres  # Utilisateur de la base de données
          POSTGRES_PASSWORD: fadwa  # Mot de passe de la base de données
          POSTGRES_DB: bibliotheque_iset  # Nom de la base de données
        ports:
          - 5432:5432  # Port exposé pour PostgreSQL
        options: --health-cmd pg_isready --health-interval 10s --health-timeout 5s --health-retries 5  # Vérification de la santé du service

    steps:
      # Étape 1 : Cloner le code du dépôt
      - name: Checkout Code
        uses: actions/checkout@v2

      # Étape 2 : Installer les dépendances du backend
      - name: Install Backend Dependencies
        run: |
          cd back
          npm install

      # Étape 3 : Installer les dépendances du frontend
      - name: Install Frontend Dependencies
        run: |
          cd front
          npm install

          # Étape 11 : Construire l'image Docker du backend
      - name: Build Backend Docker Image
        run: |
          docker build -f back/Dockerfile -t touatifadwa/backend:latest .

      # Étape 4 : Construire l'image Docker du frontend
      - name: Build Frontend Docker Image
        run: |
          docker build -f front/Dockerfile -t touatifadwa/frontend:latest .

      # Étape 5 : Se connecter à Docker Hub et pousser l'image du backend
      - name: Push Backend Docker Image
        run: |
          docker login -u touatifadwa -p foufou53550880
          docker push touatifadwa/backend:latest

      # Étape 6 : Se connecter à Docker Hub et pousser l'image du frontend
      - name: Push Frontend Docker Image
        run: |
          docker login -u touatifadwa -p foufou53550880
          docker push touatifadwa/frontend:latest

      # Étape 7 : Vérifier la connexion à la base de données
      - name: Check Database Connection
        env:
          DB_USER: postgres
          DB_HOST: localhost
          DB_NAME: bibliotheque_iset
          DB_PASSWORD: fadwa
          DB_PORT: 5432
        run: |
          psql postgresql://$DB_USER:$DB_PASSWORD@$DB_HOST:$DB_PORT/$DB_NAME -c "SELECT NOW();"

      # Étape 8 : Exécuter les migrations de la base de données
      - name: Run Database Migrations
        env:
          DB_USER: postgres
          DB_HOST: localhost
          DB_NAME: bibliotheque_iset
          DB_PASSWORD: fadwa
          DB_PORT: 5432
        run: |
          cd back
          npm install knex  # Installer knex localement
          npx knex migrate:latest  # Appliquer les migrations

      # Étape 9 : Vérifier que les tables existent
      - name: Verify Database Tables
        env:
          DB_USER: postgres
          DB_HOST: localhost
          DB_NAME: bibliotheque_iset
          DB_PASSWORD: fadwa
          DB_PORT: 5432
        run: |
          psql postgresql://$DB_USER:$DB_PASSWORD@$DB_HOST:$DB_PORT/$DB_NAME -c "\dt"

      # Étape 10 : Inspecter la table `users`
      - name: Inspect Users Table
        env:
          DB_USER: postgres
          DB_HOST: localhost
          DB_NAME: bibliotheque_iset
          DB_PASSWORD: fadwa
          DB_PORT: 5432
        run: |
          psql postgresql://$DB_USER:$DB_PASSWORD@$DB_HOST:$DB_PORT/$DB_NAME -c "SELECT * FROM users;"

      # Étape 11 : Exécuter les seeds (si nécessaire)
      - name: Run Database Seeds
        env:
          DB_USER: postgres
          DB_HOST: localhost
          DB_NAME: bibliotheque_iset
          DB_PASSWORD: fadwa
          DB_PORT: 5432
        run: |
          cd back
          npx knex seed:run  # Exécuter les seeds

      # Étape 12 : Exécuter les tests backend (Jest)
      - name: Run Backend Tests
        env:
          DB_USER: postgres
          DB_HOST: localhost
          DB_NAME: bibliotheque_iset
          DB_PASSWORD: fadwa
          DB_PORT: 5432
          PORT: 3000
          JWT_SECRET: isettozeursecretkey
        run: |
          cd back
          npm test -- --verbose  # Afficher les logs détaillés des tests

      # Étape 13 : Exécuter les tests frontend (par exemple, Jest)
      - name: Run Frontend Tests
        run: |
          cd front
          npm test

      

      # Étape 14 : Déployer sur Kubernetes
      - name: Deploy to Kubernetes
        run: |
          kubectl apply -f k8s/backend-deployment.yaml
          kubectl apply -f k8s/frontend-deployment.yaml
          kubectl apply -f k8s/service.yaml

      # Étape 15 : Vérification de la santé des pods (health checks)
      - name: Verify Services Health
        run: |
          kubectl get pods
          if kubectl get pods > /dev/null 2>&1; then
            kubectl describe pod $(kubectl get pods -o jsonpath="{.items[0].metadata.name}")
          else
            echo "Aucun pod disponible."
          fi

      # Étape 16 : Rollback en cas d'échec
      - name: Rollback in case of Failure
        if: failure()
        run: |
          kubectl rollout undo deployment/backend
          kubectl rollout undo deployment/frontend