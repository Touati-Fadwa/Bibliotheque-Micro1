name: CI/CD Pipeline

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:
  build:
    runs-on: ubuntu-latest

    services:
      postgres:
        image: postgres:16
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: fadwa
          POSTGRES_DB: bibliotheque_iset
        ports:
          - 5432:5432
        options: --health-cmd pg_isready --health-interval 10s --health-timeout 5s --health-retries 5

    steps:
      - name: Checkout Code
        uses: actions/checkout@v2

      - name: Install Backend Dependencies
        run: |
          cd back
          npm install

      - name: Install Frontend Dependencies
        run: |
          cd front
          npm install

      - name: Build Backend Docker Image
        run: |
          docker build -f back/Dockerfile -t touatifadwa/backend:latest .

      - name: Build Frontend Docker Image
        run: |
          docker build -f front/Dockerfile -t touatifadwa/frontend:latest .

      - name: Push Backend Docker Image
        run: |
          docker login -u touatifadwa -p foufou53550880
          docker push touatifadwa/backend:latest

      - name: Push Frontend Docker Image
        run: |
          docker login -u touatifadwa -p foufou53550880
          docker push touatifadwa/frontend:latest

      - name: Check Database Connection
        env:
          DB_USER: postgres
          DB_HOST: localhost
          DB_NAME: bibliotheque_iset
          DB_PASSWORD: fadwa
          DB_PORT: 5432
        run: |
          psql postgresql://$DB_USER:$DB_PASSWORD@$DB_HOST:$DB_PORT/$DB_NAME -c "SELECT NOW();"

      # ÉTAPE CORRIGÉE (Solution autonome sans fichier supplémentaire)
      - name: Run Database Migrations
        working-directory: ./back
        run: |
          npm install knex pg
          npx knex migrate:latest \
            --client=pg \
            --connection="postgres://postgres:fadwa@localhost:5432/bibliotheque_iset" \
            --migrations-directory=./migrations \
            --cwd=.

      - name: Verify Database Tables
        env:
          DB_USER: postgres
          DB_HOST: localhost
          DB_NAME: bibliotheque_iset
          DB_PASSWORD: fadwa
          DB_PORT: 5432
        run: |
          psql postgresql://$DB_USER:$DB_PASSWORD@$DB_HOST:$DB_PORT/$DB_NAME -c "\dt"

      - name: Inspect Users Table
        env:
          DB_USER: postgres
          DB_HOST: localhost
          DB_NAME: bibliotheque_iset
          DB_PASSWORD: fadwa
          DB_PORT: 5432
        run: |
          psql postgresql://$DB_USER:$DB_PASSWORD@$DB_HOST:$DB_PORT/$DB_NAME -c "SELECT * FROM users;"

      - name: Run Database Seeds
        working-directory: ./back
        run: |
          npx knex seed:run \
            --client=pg \
            --connection="postgres://postgres:fadwa@localhost:5432/bibliotheque_iset" \
            --seeds-directory=./seeds

      - name: Run Backend Tests
        env:
          DB_USER: postgres
          DB_HOST: localhost
          DB_NAME: bibliotheque_iset
          DB_PASSWORD: fadwa
          DB_PORT: 5432
          PORT: 3000
          JWT_SECRET: isettozeursecretkey
        run: |
          cd back
          npm test -- --verbose

      - name: Run Frontend Tests
        run: |
          cd front
          npm test

      - name: Deploy to Kubernetes
        run: |
          kubectl apply -f k8s/backend-deployment.yaml
          kubectl apply -f k8s/frontend-deployment.yaml
          kubectl apply -f k8s/service.yaml

      - name: Verify Services Health
        run: |
          kubectl get pods
          if kubectl get pods > /dev/null 2>&1; then
            kubectl describe pod $(kubectl get pods -o jsonpath="{.items[0].metadata.name}")
          else
            echo "Aucun pod disponible."
          fi

      - name: Rollback in case of Failure
        if: failure()
        run: |
          kubectl rollout undo deployment/backend
          kubectl rollout undo deployment/frontend